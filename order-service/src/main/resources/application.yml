server:
  port: 8082

spring:
  application:
    name: order-service

  # H2 Database (temporary)
  datasource:
    url: jdbc:h2:mem:orderdb
    driverClassName: org.h2.Driver
    username: sa
    password:

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: validate

  kafka:
    bootstrap-servers: localhost:9092
    client-id: ${spring.application.name}
    consumer:
      group-id: order-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "ru.lifevaluable.brewflow.*"
        spring.json.type.mapping: paymentProcessed:ru.lifevaluable.brewflow.order.event.PaymentProcessedEvent
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        allow.auto.create.topics: true
        spring.json.type.mapping: orderCreated:ru.lifevaluable.brewflow.order.event.OrderCreatedEvent

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans

logging:
  charset:
    console: UTF-8
    file: UTF-8
  level:
    ru.lifevaluable.brewflow: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%15.15t] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

app:
  jwt:
    secret: "YnJld2Zsb3ctc3VwZXItc2VjcmV0LWp3dC1rZXktdGhhdC1zaG91bGQtYmUtbG9uZy1hbmQtc2VjdXJlLWZvci1wcm9kdWN0aW9uLXVzZS1vbmx5"
    expiration-ms: 86400000

user-service:
  base-url: http://localhost:8081
  connect-timeout: 5000
  read-timeout: 10000

springdoc:
  swagger-ui:
    path: /swagger-ui.html
  api-docs:
    path: /v3/api-docs
