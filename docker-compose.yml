services:
  # grafana-stack
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo.yaml:ro
      - tempo-data:/var/tempo  # ← Изменено с /tmp/tempo на /var/tempo
    ports:
      - "3200:3200"
      - "9411:9411"
      - "4317:4317"
      - "4318:4318"
    networks:
      - brewflow-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - brewflow-network
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./observability/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - brewflow-network
    depends_on:
      loki:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - brewflow-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "http://localhost:9090/-/healthy" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - brewflow-network
    depends_on:
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP порт
      - "8025:8025"  # Web UI
    networks:
      - brewflow-network

  # APP
  kafka:
    image: apache/kafka:4.1.0
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - brewflow-network
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: mLWQJGmWRmWe2Qdy3KJm2A
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c 'cat < /dev/null > /dev/tcp/localhost/9092' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  postgres-user:
    image: postgres:16-alpine
    container_name: postgres-user
    environment:
      POSTGRES_DB: brewflow_users
      POSTGRES_USER: brewflow_user
      POSTGRES_PASSWORD: brewflow_pass
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - brewflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brewflow_user -d brewflow_users"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  postgres-order:
    image: postgres:16-alpine
    container_name: postgres-order
    environment:
      POSTGRES_DB: brewflow_orders
      POSTGRES_USER: brewflow_user
      POSTGRES_PASSWORD: brewflow_pass
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - brewflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brewflow_user -d brewflow_orders"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  user-service:
    image: brewflow/user-service:latest
    container_name: user-service
    networks:
      - brewflow-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://tempo:9411/api/v2/spans
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8081/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres-user:
        condition: service_healthy

  order-service:
    image: brewflow/order-service:latest
    container_name: order-service
    networks:
      - brewflow-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      USER_SERVICE_BASE_URL: http://user-service:8081
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://tempo:9411/api/v2/spans
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8082/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
      postgres-order:
        condition: service_healthy

  payment-service:
    image: brewflow/payment-service:latest
    container_name: payment-service
    networks:
      - brewflow-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://tempo:9411/api/v2/spans
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8083/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      kafka:
        condition: service_healthy

  notification-service:
    image: brewflow/notification-service:latest
    container_name: notification-service
    networks:
      - brewflow-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://tempo:9411/api/v2/spans
      BREWFLOW_MAIL_USERNAME: noreply@brewflow.local
      BREWFLOW_MAIL_PASSWORD: ""
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: 1025
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "false"
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "false"
    ports:
      - "8084:8084"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8084/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      kafka:
        condition: service_healthy

  api-gateway:
    image: brewflow/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    networks:
      - brewflow-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://tempo:9411/api/v2/spans
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8080/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      user-service:
        condition: service_healthy
      order-service:
        condition: service_healthy

volumes:
  kafka-data:
    driver: local
  loki-data:
    driver: local
  tempo-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-user-data:
    driver: local
  postgres-order-data:
    driver: local

networks:
  brewflow-network:
    driver: bridge